泛型
Go 支持使用类型参数进行泛型编程。本课展示了一些在代码中使用泛型的示例。

Go 作者
https://golang.org

* 类型参数

Go 函数可以使用类型参数编写，以适用于多种类型。函数的类型参数出现在方括号中，位于函数参数之前。

  func Index[T comparable](s []T, x T) int

此声明意味着 `s` 是一个切片，其类型为任何满足内置约束 `comparable` 的类型 `T`。`x` 也是相同类型的值。

`comparable` 是一个有用的约束，使得可以对该类型的值使用 `==` 和 `!=` 运算符。在此示例中，我们使用它来比较一个值与所有切片元素，直到找到匹配项。此 `Index` 函数适用于任何支持比较的类型。

.play generics/index.go

* 泛型类型

除了泛型函数外，Go 还支持泛型类型。类型可以使用类型参数进行参数化，这对于实现泛型数据结构可能很有用。

此示例展示了一个简单类型的声明，用于保存任何类型值的单向链表。

作为练习，请为此列表实现添加一些功能。

.play generics/list.go

* 祝贺你！

你完成了本课！

你可以返回到 [[/tour/list][模块]] 列表中，查找下一步要学习的内容，或者继续进行 [[javascript:click('.next-page')][下一课]]。
